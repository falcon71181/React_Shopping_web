{"ast":null,"code":"export default function getTotalWidthsMetadata(params) {\n  var columns = params.columns,\n    minColumnWidth = params.minColumnWidth,\n    maxColumnWidth = params.maxColumnWidth;\n  var initial = {\n    totalFixedWidth: 0,\n    totalFixedColumns: 0,\n    totalResizedWidth: 0,\n    totalResizedColumns: 0,\n    totalFlexibleColumns: 0,\n    minColumnWidth: minColumnWidth,\n    maxColumnWidth: maxColumnWidth\n  };\n  return columns.reduce(function (prev, col, index) {\n    var currentColumn = columns[index];\n    if (col.width) {\n      prev.totalFixedWidth += col.width;\n      prev.totalFixedColumns += 1;\n    } else if (currentColumn.isResized) {\n      prev.totalResizedWidth += currentColumn.computedWidth;\n      prev.totalResizedColumns += 1;\n    } else if (col.defaultWidth) {\n      prev.totalResizedWidth += col.defaultWidth;\n      prev.totalResizedColumns += 1;\n    } else {\n      prev.totalFlexibleColumns += 1;\n    }\n    return prev;\n  }, initial);\n}","map":{"version":3,"names":["getTotalWidthsMetadata","params","columns","minColumnWidth","maxColumnWidth","initial","totalFixedWidth","totalFixedColumns","totalResizedWidth","totalResizedColumns","totalFlexibleColumns","reduce","prev","col","index","currentColumn","width","isResized","computedWidth","defaultWidth"],"sources":["/home/kali/Desktop/react/React_Shopping_web/node_modules/react-rainbow-components/esm/components/Table/helpers/resizer/getTotalWidthsMetadata.js"],"sourcesContent":["export default function getTotalWidthsMetadata(params) {\n  var columns = params.columns,\n      minColumnWidth = params.minColumnWidth,\n      maxColumnWidth = params.maxColumnWidth;\n  var initial = {\n    totalFixedWidth: 0,\n    totalFixedColumns: 0,\n    totalResizedWidth: 0,\n    totalResizedColumns: 0,\n    totalFlexibleColumns: 0,\n    minColumnWidth: minColumnWidth,\n    maxColumnWidth: maxColumnWidth\n  };\n  return columns.reduce(function (prev, col, index) {\n    var currentColumn = columns[index];\n\n    if (col.width) {\n      prev.totalFixedWidth += col.width;\n      prev.totalFixedColumns += 1;\n    } else if (currentColumn.isResized) {\n      prev.totalResizedWidth += currentColumn.computedWidth;\n      prev.totalResizedColumns += 1;\n    } else if (col.defaultWidth) {\n      prev.totalResizedWidth += col.defaultWidth;\n      prev.totalResizedColumns += 1;\n    } else {\n      prev.totalFlexibleColumns += 1;\n    }\n\n    return prev;\n  }, initial);\n}"],"mappings":"AAAA,eAAe,SAASA,sBAAsBA,CAACC,MAAM,EAAE;EACrD,IAAIC,OAAO,GAAGD,MAAM,CAACC,OAAO;IACxBC,cAAc,GAAGF,MAAM,CAACE,cAAc;IACtCC,cAAc,GAAGH,MAAM,CAACG,cAAc;EAC1C,IAAIC,OAAO,GAAG;IACZC,eAAe,EAAE,CAAC;IAClBC,iBAAiB,EAAE,CAAC;IACpBC,iBAAiB,EAAE,CAAC;IACpBC,mBAAmB,EAAE,CAAC;IACtBC,oBAAoB,EAAE,CAAC;IACvBP,cAAc,EAAEA,cAAc;IAC9BC,cAAc,EAAEA;EAClB,CAAC;EACD,OAAOF,OAAO,CAACS,MAAM,CAAC,UAAUC,IAAI,EAAEC,GAAG,EAAEC,KAAK,EAAE;IAChD,IAAIC,aAAa,GAAGb,OAAO,CAACY,KAAK,CAAC;IAElC,IAAID,GAAG,CAACG,KAAK,EAAE;MACbJ,IAAI,CAACN,eAAe,IAAIO,GAAG,CAACG,KAAK;MACjCJ,IAAI,CAACL,iBAAiB,IAAI,CAAC;IAC7B,CAAC,MAAM,IAAIQ,aAAa,CAACE,SAAS,EAAE;MAClCL,IAAI,CAACJ,iBAAiB,IAAIO,aAAa,CAACG,aAAa;MACrDN,IAAI,CAACH,mBAAmB,IAAI,CAAC;IAC/B,CAAC,MAAM,IAAII,GAAG,CAACM,YAAY,EAAE;MAC3BP,IAAI,CAACJ,iBAAiB,IAAIK,GAAG,CAACM,YAAY;MAC1CP,IAAI,CAACH,mBAAmB,IAAI,CAAC;IAC/B,CAAC,MAAM;MACLG,IAAI,CAACF,oBAAoB,IAAI,CAAC;IAChC;IAEA,OAAOE,IAAI;EACb,CAAC,EAAEP,OAAO,CAAC;AACb"},"metadata":{},"sourceType":"module","externalDependencies":[]}