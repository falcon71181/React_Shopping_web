{"ast":null,"code":"export default function filterCountries(query, countries, country) {\n  if (query === '' || query === '+') {\n    var _filteredCountries = countries.filter(function (value) {\n      return value.isoCode !== country.isoCode;\n    });\n    _filteredCountries.unshift(country);\n    return _filteredCountries;\n  }\n  var queryToLower = query.toLowerCase();\n  var isFilteredCountry = false;\n  var filteredCountries = countries.filter(function (value) {\n    if (!isNaN(query)) {\n      var index = value.countryCode.toString().indexOf(queryToLower);\n      if (index === 0 || index === 1) {\n        if (value.isoCode === country.isoCode) {\n          isFilteredCountry = true;\n          return false;\n        }\n        return true;\n      }\n      return false;\n    }\n    if (value.country.toLowerCase().indexOf(queryToLower) !== -1 || value.isoCode.indexOf(queryToLower) !== -1) {\n      if (value.isoCode === country.isoCode) {\n        isFilteredCountry = true;\n        return false;\n      }\n      return true;\n    }\n    return false;\n  }) || [];\n  if (isFilteredCountry) {\n    filteredCountries.unshift(country);\n  }\n  return filteredCountries;\n}","map":{"version":3,"names":["filterCountries","query","countries","country","_filteredCountries","filter","value","isoCode","unshift","queryToLower","toLowerCase","isFilteredCountry","filteredCountries","isNaN","index","countryCode","toString","indexOf"],"sources":["/home/kali/Desktop/react/React_Shopping_web/node_modules/react-rainbow-components/esm/components/PhoneInput/countriesDropdown/helpers/filterCountries.js"],"sourcesContent":["export default function filterCountries(query, countries, country) {\n  if (query === '' || query === '+') {\n    var _filteredCountries = countries.filter(function (value) {\n      return value.isoCode !== country.isoCode;\n    });\n\n    _filteredCountries.unshift(country);\n\n    return _filteredCountries;\n  }\n\n  var queryToLower = query.toLowerCase();\n  var isFilteredCountry = false;\n  var filteredCountries = countries.filter(function (value) {\n    if (!isNaN(query)) {\n      var index = value.countryCode.toString().indexOf(queryToLower);\n\n      if (index === 0 || index === 1) {\n        if (value.isoCode === country.isoCode) {\n          isFilteredCountry = true;\n          return false;\n        }\n\n        return true;\n      }\n\n      return false;\n    }\n\n    if (value.country.toLowerCase().indexOf(queryToLower) !== -1 || value.isoCode.indexOf(queryToLower) !== -1) {\n      if (value.isoCode === country.isoCode) {\n        isFilteredCountry = true;\n        return false;\n      }\n\n      return true;\n    }\n\n    return false;\n  }) || [];\n\n  if (isFilteredCountry) {\n    filteredCountries.unshift(country);\n  }\n\n  return filteredCountries;\n}"],"mappings":"AAAA,eAAe,SAASA,eAAeA,CAACC,KAAK,EAAEC,SAAS,EAAEC,OAAO,EAAE;EACjE,IAAIF,KAAK,KAAK,EAAE,IAAIA,KAAK,KAAK,GAAG,EAAE;IACjC,IAAIG,kBAAkB,GAAGF,SAAS,CAACG,MAAM,CAAC,UAAUC,KAAK,EAAE;MACzD,OAAOA,KAAK,CAACC,OAAO,KAAKJ,OAAO,CAACI,OAAO;IAC1C,CAAC,CAAC;IAEFH,kBAAkB,CAACI,OAAO,CAACL,OAAO,CAAC;IAEnC,OAAOC,kBAAkB;EAC3B;EAEA,IAAIK,YAAY,GAAGR,KAAK,CAACS,WAAW,CAAC,CAAC;EACtC,IAAIC,iBAAiB,GAAG,KAAK;EAC7B,IAAIC,iBAAiB,GAAGV,SAAS,CAACG,MAAM,CAAC,UAAUC,KAAK,EAAE;IACxD,IAAI,CAACO,KAAK,CAACZ,KAAK,CAAC,EAAE;MACjB,IAAIa,KAAK,GAAGR,KAAK,CAACS,WAAW,CAACC,QAAQ,CAAC,CAAC,CAACC,OAAO,CAACR,YAAY,CAAC;MAE9D,IAAIK,KAAK,KAAK,CAAC,IAAIA,KAAK,KAAK,CAAC,EAAE;QAC9B,IAAIR,KAAK,CAACC,OAAO,KAAKJ,OAAO,CAACI,OAAO,EAAE;UACrCI,iBAAiB,GAAG,IAAI;UACxB,OAAO,KAAK;QACd;QAEA,OAAO,IAAI;MACb;MAEA,OAAO,KAAK;IACd;IAEA,IAAIL,KAAK,CAACH,OAAO,CAACO,WAAW,CAAC,CAAC,CAACO,OAAO,CAACR,YAAY,CAAC,KAAK,CAAC,CAAC,IAAIH,KAAK,CAACC,OAAO,CAACU,OAAO,CAACR,YAAY,CAAC,KAAK,CAAC,CAAC,EAAE;MAC1G,IAAIH,KAAK,CAACC,OAAO,KAAKJ,OAAO,CAACI,OAAO,EAAE;QACrCI,iBAAiB,GAAG,IAAI;QACxB,OAAO,KAAK;MACd;MAEA,OAAO,IAAI;IACb;IAEA,OAAO,KAAK;EACd,CAAC,CAAC,IAAI,EAAE;EAER,IAAIA,iBAAiB,EAAE;IACrBC,iBAAiB,CAACJ,OAAO,CAACL,OAAO,CAAC;EACpC;EAEA,OAAOS,iBAAiB;AAC1B"},"metadata":{},"sourceType":"module","externalDependencies":[]}