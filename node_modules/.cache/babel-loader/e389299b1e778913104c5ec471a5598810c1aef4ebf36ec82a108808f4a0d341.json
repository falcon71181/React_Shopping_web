{"ast":null,"code":"module.exports = clipboardCopy;\nfunction clipboardCopy(text) {\n  // Use the Async Clipboard API when available\n  if (navigator.clipboard) {\n    return navigator.clipboard.writeText(text);\n  }\n\n  // ...Otherwise, use document.execCommand() fallback\n\n  // Put the text to copy into a <span>\n  var span = document.createElement('span');\n  span.textContent = text;\n\n  // Preserve consecutive spaces and newlines\n  span.style.whiteSpace = 'pre';\n\n  // An <iframe> isolates the <span> from the page's styles\n  var iframe = document.createElement('iframe');\n  iframe.sandbox = 'allow-same-origin';\n\n  // Add the <iframe> to the page\n  document.body.appendChild(iframe);\n  var win = iframe.contentWindow;\n\n  // Add the <span> to the <iframe>\n  win.document.body.appendChild(span);\n\n  // Get a Selection object representing the range of text selected by the user\n  var selection = win.getSelection();\n\n  // Fallback for Firefox which fails to get a selection from an <iframe>\n  if (!selection) {\n    win = window;\n    selection = win.getSelection();\n    document.body.appendChild(span);\n  }\n  var range = win.document.createRange();\n  selection.removeAllRanges();\n  range.selectNode(span);\n  selection.addRange(range);\n  var success = false;\n  try {\n    success = win.document.execCommand('copy');\n  } catch (err) {}\n  selection.removeAllRanges();\n  win.document.body.removeChild(span);\n  document.body.removeChild(iframe);\n\n  // The Async Clipboard API returns a promise that may reject with `undefined` so we\n  // match that here for consistency.\n  return success ? Promise.resolve() : Promise.reject(); // eslint-disable-line prefer-promise-reject-errors\n}","map":{"version":3,"names":["module","exports","clipboardCopy","text","navigator","clipboard","writeText","span","document","createElement","textContent","style","whiteSpace","iframe","sandbox","body","appendChild","win","contentWindow","selection","getSelection","window","range","createRange","removeAllRanges","selectNode","addRange","success","execCommand","err","removeChild","Promise","resolve","reject"],"sources":["/home/kali/Desktop/react/React_Shopping_web/node_modules/clipboard-copy/index.js"],"sourcesContent":["module.exports = clipboardCopy\n\nfunction clipboardCopy (text) {\n  // Use the Async Clipboard API when available\n  if (navigator.clipboard) {\n    return navigator.clipboard.writeText(text)\n  }\n\n  // ...Otherwise, use document.execCommand() fallback\n\n  // Put the text to copy into a <span>\n  var span = document.createElement('span')\n  span.textContent = text\n\n  // Preserve consecutive spaces and newlines\n  span.style.whiteSpace = 'pre'\n\n  // An <iframe> isolates the <span> from the page's styles\n  var iframe = document.createElement('iframe')\n  iframe.sandbox = 'allow-same-origin'\n\n  // Add the <iframe> to the page\n  document.body.appendChild(iframe)\n  var win = iframe.contentWindow\n\n  // Add the <span> to the <iframe>\n  win.document.body.appendChild(span)\n\n  // Get a Selection object representing the range of text selected by the user\n  var selection = win.getSelection()\n\n  // Fallback for Firefox which fails to get a selection from an <iframe>\n  if (!selection) {\n    win = window\n    selection = win.getSelection()\n    document.body.appendChild(span)\n  }\n\n  var range = win.document.createRange()\n  selection.removeAllRanges()\n  range.selectNode(span)\n  selection.addRange(range)\n\n  var success = false\n  try {\n    success = win.document.execCommand('copy')\n  } catch (err) {}\n\n  selection.removeAllRanges()\n  win.document.body.removeChild(span)\n  document.body.removeChild(iframe)\n\n  // The Async Clipboard API returns a promise that may reject with `undefined` so we\n  // match that here for consistency.\n  return success\n    ? Promise.resolve()\n    : Promise.reject() // eslint-disable-line prefer-promise-reject-errors\n}\n"],"mappings":"AAAAA,MAAM,CAACC,OAAO,GAAGC,aAAa;AAE9B,SAASA,aAAaA,CAAEC,IAAI,EAAE;EAC5B;EACA,IAAIC,SAAS,CAACC,SAAS,EAAE;IACvB,OAAOD,SAAS,CAACC,SAAS,CAACC,SAAS,CAACH,IAAI,CAAC;EAC5C;;EAEA;;EAEA;EACA,IAAII,IAAI,GAAGC,QAAQ,CAACC,aAAa,CAAC,MAAM,CAAC;EACzCF,IAAI,CAACG,WAAW,GAAGP,IAAI;;EAEvB;EACAI,IAAI,CAACI,KAAK,CAACC,UAAU,GAAG,KAAK;;EAE7B;EACA,IAAIC,MAAM,GAAGL,QAAQ,CAACC,aAAa,CAAC,QAAQ,CAAC;EAC7CI,MAAM,CAACC,OAAO,GAAG,mBAAmB;;EAEpC;EACAN,QAAQ,CAACO,IAAI,CAACC,WAAW,CAACH,MAAM,CAAC;EACjC,IAAII,GAAG,GAAGJ,MAAM,CAACK,aAAa;;EAE9B;EACAD,GAAG,CAACT,QAAQ,CAACO,IAAI,CAACC,WAAW,CAACT,IAAI,CAAC;;EAEnC;EACA,IAAIY,SAAS,GAAGF,GAAG,CAACG,YAAY,CAAC,CAAC;;EAElC;EACA,IAAI,CAACD,SAAS,EAAE;IACdF,GAAG,GAAGI,MAAM;IACZF,SAAS,GAAGF,GAAG,CAACG,YAAY,CAAC,CAAC;IAC9BZ,QAAQ,CAACO,IAAI,CAACC,WAAW,CAACT,IAAI,CAAC;EACjC;EAEA,IAAIe,KAAK,GAAGL,GAAG,CAACT,QAAQ,CAACe,WAAW,CAAC,CAAC;EACtCJ,SAAS,CAACK,eAAe,CAAC,CAAC;EAC3BF,KAAK,CAACG,UAAU,CAAClB,IAAI,CAAC;EACtBY,SAAS,CAACO,QAAQ,CAACJ,KAAK,CAAC;EAEzB,IAAIK,OAAO,GAAG,KAAK;EACnB,IAAI;IACFA,OAAO,GAAGV,GAAG,CAACT,QAAQ,CAACoB,WAAW,CAAC,MAAM,CAAC;EAC5C,CAAC,CAAC,OAAOC,GAAG,EAAE,CAAC;EAEfV,SAAS,CAACK,eAAe,CAAC,CAAC;EAC3BP,GAAG,CAACT,QAAQ,CAACO,IAAI,CAACe,WAAW,CAACvB,IAAI,CAAC;EACnCC,QAAQ,CAACO,IAAI,CAACe,WAAW,CAACjB,MAAM,CAAC;;EAEjC;EACA;EACA,OAAOc,OAAO,GACVI,OAAO,CAACC,OAAO,CAAC,CAAC,GACjBD,OAAO,CAACE,MAAM,CAAC,CAAC,EAAC;AACvB"},"metadata":{},"sourceType":"script","externalDependencies":[]}