{"ast":null,"code":"'use strict';\n\nvar trim = require('trim');\nvar interrupt = require('../util/interrupt');\nmodule.exports = blockquote;\nvar lineFeed = '\\n';\nvar tab = '\\t';\nvar space = ' ';\nvar greaterThan = '>';\nfunction blockquote(eat, value, silent) {\n  var self = this;\n  var offsets = self.offset;\n  var tokenizers = self.blockTokenizers;\n  var interruptors = self.interruptBlockquote;\n  var now = eat.now();\n  var currentLine = now.line;\n  var length = value.length;\n  var values = [];\n  var contents = [];\n  var indents = [];\n  var add;\n  var index = 0;\n  var character;\n  var rest;\n  var nextIndex;\n  var content;\n  var line;\n  var startIndex;\n  var prefixed;\n  var exit;\n  while (index < length) {\n    character = value.charAt(index);\n    if (character !== space && character !== tab) {\n      break;\n    }\n    index++;\n  }\n  if (value.charAt(index) !== greaterThan) {\n    return;\n  }\n  if (silent) {\n    return true;\n  }\n  index = 0;\n  while (index < length) {\n    nextIndex = value.indexOf(lineFeed, index);\n    startIndex = index;\n    prefixed = false;\n    if (nextIndex === -1) {\n      nextIndex = length;\n    }\n    while (index < length) {\n      character = value.charAt(index);\n      if (character !== space && character !== tab) {\n        break;\n      }\n      index++;\n    }\n    if (value.charAt(index) === greaterThan) {\n      index++;\n      prefixed = true;\n      if (value.charAt(index) === space) {\n        index++;\n      }\n    } else {\n      index = startIndex;\n    }\n    content = value.slice(index, nextIndex);\n    if (!prefixed && !trim(content)) {\n      index = startIndex;\n      break;\n    }\n    if (!prefixed) {\n      rest = value.slice(index);\n\n      // Check if the following code contains a possible block.\n      if (interrupt(interruptors, tokenizers, self, [eat, rest, true])) {\n        break;\n      }\n    }\n    line = startIndex === index ? content : value.slice(startIndex, nextIndex);\n    indents.push(index - startIndex);\n    values.push(line);\n    contents.push(content);\n    index = nextIndex + 1;\n  }\n  index = -1;\n  length = indents.length;\n  add = eat(values.join(lineFeed));\n  while (++index < length) {\n    offsets[currentLine] = (offsets[currentLine] || 0) + indents[index];\n    currentLine++;\n  }\n  exit = self.enterBlock();\n  contents = self.tokenizeBlock(contents.join(lineFeed), now);\n  exit();\n  return add({\n    type: 'blockquote',\n    children: contents\n  });\n}","map":{"version":3,"names":["trim","require","interrupt","module","exports","blockquote","lineFeed","tab","space","greaterThan","eat","value","silent","self","offsets","offset","tokenizers","blockTokenizers","interruptors","interruptBlockquote","now","currentLine","line","length","values","contents","indents","add","index","character","rest","nextIndex","content","startIndex","prefixed","exit","charAt","indexOf","slice","push","join","enterBlock","tokenizeBlock","type","children"],"sources":["/home/kali/Desktop/react/React_Shopping_web/node_modules/remark-parse/lib/tokenize/blockquote.js"],"sourcesContent":["'use strict'\n\nvar trim = require('trim')\nvar interrupt = require('../util/interrupt')\n\nmodule.exports = blockquote\n\nvar lineFeed = '\\n'\nvar tab = '\\t'\nvar space = ' '\nvar greaterThan = '>'\n\nfunction blockquote(eat, value, silent) {\n  var self = this\n  var offsets = self.offset\n  var tokenizers = self.blockTokenizers\n  var interruptors = self.interruptBlockquote\n  var now = eat.now()\n  var currentLine = now.line\n  var length = value.length\n  var values = []\n  var contents = []\n  var indents = []\n  var add\n  var index = 0\n  var character\n  var rest\n  var nextIndex\n  var content\n  var line\n  var startIndex\n  var prefixed\n  var exit\n\n  while (index < length) {\n    character = value.charAt(index)\n\n    if (character !== space && character !== tab) {\n      break\n    }\n\n    index++\n  }\n\n  if (value.charAt(index) !== greaterThan) {\n    return\n  }\n\n  if (silent) {\n    return true\n  }\n\n  index = 0\n\n  while (index < length) {\n    nextIndex = value.indexOf(lineFeed, index)\n    startIndex = index\n    prefixed = false\n\n    if (nextIndex === -1) {\n      nextIndex = length\n    }\n\n    while (index < length) {\n      character = value.charAt(index)\n\n      if (character !== space && character !== tab) {\n        break\n      }\n\n      index++\n    }\n\n    if (value.charAt(index) === greaterThan) {\n      index++\n      prefixed = true\n\n      if (value.charAt(index) === space) {\n        index++\n      }\n    } else {\n      index = startIndex\n    }\n\n    content = value.slice(index, nextIndex)\n\n    if (!prefixed && !trim(content)) {\n      index = startIndex\n      break\n    }\n\n    if (!prefixed) {\n      rest = value.slice(index)\n\n      // Check if the following code contains a possible block.\n      if (interrupt(interruptors, tokenizers, self, [eat, rest, true])) {\n        break\n      }\n    }\n\n    line = startIndex === index ? content : value.slice(startIndex, nextIndex)\n\n    indents.push(index - startIndex)\n    values.push(line)\n    contents.push(content)\n\n    index = nextIndex + 1\n  }\n\n  index = -1\n  length = indents.length\n  add = eat(values.join(lineFeed))\n\n  while (++index < length) {\n    offsets[currentLine] = (offsets[currentLine] || 0) + indents[index]\n    currentLine++\n  }\n\n  exit = self.enterBlock()\n  contents = self.tokenizeBlock(contents.join(lineFeed), now)\n  exit()\n\n  return add({type: 'blockquote', children: contents})\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}