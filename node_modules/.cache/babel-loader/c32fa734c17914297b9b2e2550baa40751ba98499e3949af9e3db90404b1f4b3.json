{"ast":null,"code":"'use strict';\n\nvar repeat = require('repeat-string');\nvar convert = require('hast-util-is-element/convert');\nvar findAfter = require('unist-util-find-after');\nmodule.exports = toText;\nvar searchLineFeeds = /\\n/g;\nvar searchTabOrSpaces = /[\\t ]+/g;\nvar br = convert('br');\nvar p = convert('p');\nvar cell = convert(['th', 'td']);\nvar row = convert('tr');\n\n// Note that we don’t need to include void elements here as they don’t have text.\n// See: <https://github.com/wooorm/html-void-elements>\nvar notRendered = convert([\n// List from: <https://html.spec.whatwg.org/#hidden-elements>\n'datalist', 'head', 'noembed', 'noframes', 'rp', 'script', 'style', 'template', 'title',\n// Act as if we support scripting.\n'noscript',\n// Hidden attribute.\nhidden,\n// From: <https://html.spec.whatwg.org/#flow-content-3>\nclosedDialog]);\n\n// See: <https://html.spec.whatwg.org/#the-css-user-agent-style-sheet-and-presentational-hints>\nvar blockOrCaption = convert(['caption',\n// `table-caption`\n// Page\n'html', 'body',\n// Flow content\n'address', 'blockquote', 'center',\n// Legacy\n'dialog', 'div', 'figure', 'figcaption', 'footer', 'form,', 'header', 'hr', 'legend', 'listing',\n// Legacy\n'main', 'p', 'plaintext',\n// Legacy\n'pre', 'xmp',\n// Legacy\n// Sections and headings\n'article', 'aside', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'hgroup', 'nav', 'section',\n// Lists\n'dir',\n// Legacy\n'dd', 'dl', 'dt', 'menu', 'ol', 'ul']);\n\n// Implementation of the `innerText` getter:\n// <https://html.spec.whatwg.org/#the-innertext-idl-attribute>\n// Note that we act as if `node` is being rendered, and as if we’re a\n// CSS-supporting user agent.\nfunction toText(node) {\n  var children = node.children || [];\n  var block = blockOrCaption(node);\n  var whiteSpace = inferWhiteSpace(node, {});\n  var index = -1;\n  var results;\n  var result;\n  var value;\n  var count;\n\n  // Treat `text` and `comment` as having normal white-space.\n  // This deviates from the spec as in the DOM the node’s `.data` has to be\n  // returned.\n  // If you want that behavior use `hast-util-to-string`.\n  // All other nodes are later handled as if they are `element`s (so the\n  // algorithm also works on a `root`).\n  // Nodes without children are treated as a void element, so `doctype` is thus\n  // ignored.\n  if (node.type === 'text' || node.type === 'comment') {\n    return collectText(node, {\n      whiteSpace: whiteSpace,\n      breakBefore: true,\n      breakAfter: true\n    });\n  }\n\n  // 1.  If this element is not being rendered, or if the user agent is a\n  //     non-CSS user agent, then return the same value as the textContent IDL\n  //     attribute on this element.\n  //\n  //     Note: we’re not supporting stylesheets so we’re acting as if the node\n  //     is rendered.\n  //\n  //     If you want that behavior use `hast-util-to-string`.\n  //     Important: we’ll have to account for this later though.\n\n  // 2.  Let results be a new empty list.\n  results = [];\n\n  // 3.  For each child node node of this element:\n  while (++index < children.length) {\n    // 3.1. Let current be the list resulting in running the inner text\n    //      collection steps with node.\n    //      Each item in results will either be a JavaScript string or a\n    //      positive integer (a required line break count).\n    // 3.2. For each item item in current, append item to results.\n    results = results.concat(innerTextCollection(children[index], index, node, {\n      whiteSpace: whiteSpace,\n      breakBefore: index ? null : block,\n      breakAfter: index < children.length - 1 ? br(children[index + 1]) : block\n    }));\n  }\n\n  // 4.  Remove any items from results that are the empty string.\n  // 5.  Remove any runs of consecutive required line break count items at the\n  //     start or end of results.\n  // 6.  Replace each remaining run of consecutive required line break count\n  //     items with a string consisting of as many U+000A LINE FEED (LF)\n  //     characters as the maximum of the values in the required line break\n  //     count items.\n  index = -1;\n  result = [];\n  while (++index < results.length) {\n    value = results[index];\n    if (typeof value === 'number') {\n      if (count !== undefined && value > count) count = value;\n    } else if (value) {\n      if (count) result.push(repeat('\\n', count));\n      count = 0;\n      result.push(value);\n    }\n  }\n\n  // 7.  Return the concatenation of the string items in results.\n  return result.join('');\n}\n\n// <https://html.spec.whatwg.org/#inner-text-collection-steps>\nfunction innerTextCollection(node, index, parent, options) {\n  if (node.type === 'element') {\n    return collectElement(node, index, parent, options);\n  }\n  if (node.type === 'text') {\n    return [options.whiteSpace === 'normal' ? collectText(node, options) : collectPreText(node, options)];\n  }\n  return [];\n}\n\n// Collect an element.\nfunction collectElement(node, _, parent, options) {\n  // First we infer the `white-space` property.\n  var whiteSpace = inferWhiteSpace(node, options);\n  var children = node.children || [];\n  var index = -1;\n  var items = [];\n  var prefix;\n  var suffix;\n\n  // We’re ignoring point 3, and exiting without any content here, because we\n  // deviated from the spec in `toText` at step 3.\n  if (notRendered(node)) {\n    return items;\n  }\n\n  // Note: we first detect if there is going to be a break before or after the\n  // contents, as that changes the white-space handling.\n\n  // 2.  If node’s computed value of `visibility` is not `visible`, then return\n  //     items.\n  //\n  //     Note: Ignored, as everything is visible by default user agent styles.\n\n  // 3.  If node is not being rendered, then return items. [...]\n  //\n  //     Note: We already did this above.\n\n  // See `collectText` for step 4.\n\n  // 5.  If node is a `<br>` element, then append a string containing a single\n  //     U+000A LINE FEED (LF) character to items.\n  if (br(node)) {\n    suffix = '\\n';\n  }\n\n  // 7.  If node’s computed value of `display` is `table-row`, and node’s CSS\n  //     box is not the last `table-row` box of the nearest ancestor `table`\n  //     box, then append a string containing a single U+000A LINE FEED (LF)\n  //     character to items.\n  //\n  //     See: <https://html.spec.whatwg.org/#tables-2>\n  //     Note: needs further investigation as this does not account for implicit\n  //     rows.\n  else if (row(node) && findAfter(parent, node, row)) {\n    suffix = '\\n';\n  }\n\n  // 8.  If node is a `<p>` element, then append 2 (a required line break count)\n  //     at the beginning and end of items.\n  else if (p(node)) {\n    prefix = 2;\n    suffix = 2;\n  }\n\n  // 9.  If node’s used value of `display` is block-level or `table-caption`,\n  //     then append 1 (a required line break count) at the beginning and end of\n  //     items.\n  else if (blockOrCaption(node)) {\n    prefix = 1;\n    suffix = 1;\n  }\n\n  // 1.  Let items be the result of running the inner text collection steps with\n  //     each child node of node in tree order, and then concatenating the\n  //     results to a single list.\n  while (++index < children.length) {\n    items = items.concat(innerTextCollection(children[index], index, node, {\n      whiteSpace: whiteSpace,\n      breakBefore: index ? null : prefix,\n      breakAfter: index < children.length - 1 ? br(children[index + 1]) : suffix\n    }));\n  }\n\n  // 6.  If node’s computed value of `display` is `table-cell`, and node’s CSS\n  //     box is not the last `table-cell` box of its enclosing `table-row` box,\n  //     then append a string containing a single U+0009 CHARACTER TABULATION\n  //     (tab) character to items.\n  //\n  //     See: <https://html.spec.whatwg.org/#tables-2>\n  if (cell(node) && findAfter(parent, node, cell)) {\n    items.push('\\t');\n  }\n\n  // Add the pre- and suffix.\n  if (prefix) items.unshift(prefix);\n  if (suffix) items.push(suffix);\n  return items;\n}\n\n// 4.  If node is a Text node, then for each CSS text box produced by node,\n//     in content order, compute the text of the box after application of the\n//     CSS `white-space` processing rules and `text-transform` rules, set\n//     items to the list of the resulting strings, and return items.\n//     The CSS `white-space` processing rules are slightly modified:\n//     collapsible spaces at the end of lines are always collapsed, but they\n//     are only removed if the line is the last line of the block, or it ends\n//     with a br element.\n//     Soft hyphens should be preserved.\n//\n//     Note: See `collectText` and `collectPreText`.\n//     Note: we don’t deal with `text-transform`, no element has that by\n//     default.\n//\n// See: <https://drafts.csswg.org/css-text/#white-space-phase-1>\nfunction collectText(node, options) {\n  var value = String(node.value);\n  var lines = [];\n  var result = [];\n  var start = 0;\n  var index = -1;\n  var match;\n  var end;\n  var join;\n  while (start < value.length) {\n    searchLineFeeds.lastIndex = start;\n    match = searchLineFeeds.exec(value);\n    end = match ? match.index : value.length;\n    lines.push(\n    // Any sequence of collapsible spaces and tabs immediately preceding or\n    // following a segment break is removed.\n    trimAndcollapseSpacesAndTabs(\n    // [...] ignoring bidi formatting characters (characters with the\n    // Bidi_Control property [UAX9]: ALM, LTR, RTL, LRE-RLO, LRI-PDI) as if\n    // they were not there.\n    value.slice(start, end).replace(/[\\u061c\\u200e\\u200f\\u202a-\\u202e\\u2066-\\u2069]/g, ''), options.breakBefore, options.breakAfter));\n    start = end + 1;\n  }\n\n  // Collapsible segment breaks are transformed for rendering according to the\n  // segment break transformation rules.\n  // So here we jump to 4.1.2 of [CSSTEXT]:\n  // Any collapsible segment break immediately following another collapsible\n  // segment break is removed\n  while (++index < lines.length) {\n    // *   If the character immediately before or immediately after the segment\n    //     break is the zero-width space character (U+200B), then the break is\n    //     removed, leaving behind the zero-width space.\n    if (lines[index].charCodeAt(lines[index].length - 1) === 0x200b /* ZWSP */ || index < lines.length - 1 && lines[index + 1].charCodeAt(0) === 0x200b /* ZWSP */) {\n      result.push(lines[index]);\n      join = '';\n    }\n\n    // *   Otherwise, if the East Asian Width property [UAX11] of both the\n    //     character before and after the segment break is Fullwidth, Wide, or\n    //     Halfwidth (not Ambiguous), and neither side is Hangul, then the\n    //     segment break is removed.\n    //\n    //     Note: ignored.\n    // *   Otherwise, if the writing system of the segment break is Chinese,\n    //     Japanese, or Yi, and the character before or after the segment break\n    //     is punctuation or a symbol (Unicode general category P* or S*) and\n    //     has an East Asian Width property of Ambiguous, and the character on\n    //     the other side of the segment break is Fullwidth, Wide, or Halfwidth,\n    //     and not Hangul, then the segment break is removed.\n    //\n    //     Note: ignored.\n\n    // *   Otherwise, the segment break is converted to a space (U+0020).\n    else if (lines[index]) {\n      if (join) result.push(join);\n      result.push(lines[index]);\n      join = ' ';\n    }\n  }\n  return result.join('');\n}\nfunction collectPreText(node) {\n  return String(node.value);\n}\n\n// 3.  Every collapsible tab is converted to a collapsible space (U+0020).\n// 4.  Any collapsible space immediately following another collapsible\n//     space—even one outside the boundary of the inline containing that\n//     space, provided both spaces are within the same inline formatting\n//     context—is collapsed to have zero advance width. (It is invisible,\n//     but retains its soft wrap opportunity, if any.)\nfunction trimAndcollapseSpacesAndTabs(value, breakBefore, breakAfter) {\n  var result = [];\n  var start = 0;\n  var match;\n  var end;\n  while (start < value.length) {\n    searchTabOrSpaces.lastIndex = start;\n    match = searchTabOrSpaces.exec(value);\n    end = match ? match.index : value.length;\n\n    // If we’re not directly after a segment break, but there was white space,\n    // add an empty value that will be turned into a space.\n    if (!start && !end && match && !breakBefore) {\n      result.push('');\n    }\n    if (start !== end) {\n      result.push(value.slice(start, end));\n    }\n    start = match ? end + match[0].length : end;\n  }\n\n  // If we reached the end, there was trailing white space, and there’s no\n  // segment break after this node, add an empty value that will be turned\n  // into a space.\n  if (start !== end && !breakAfter) {\n    result.push('');\n  }\n  return result.join(' ');\n}\n\n// We don’t support void elements here (so `nobr wbr` -> `normal` is ignored).\nfunction inferWhiteSpace(node, options) {\n  var props = node.properties || {};\n  var inherit = options.whiteSpace || 'normal';\n  switch (node.tagName) {\n    case 'listing':\n    case 'plaintext':\n    case 'xmp':\n      return 'pre';\n    case 'nobr':\n      return 'nowrap';\n    case 'pre':\n      return props.wrap ? 'pre-wrap' : 'pre';\n    case 'td':\n    case 'th':\n      return props.noWrap ? 'nowrap' : inherit;\n    case 'textarea':\n      return 'pre-wrap';\n    default:\n      return inherit;\n  }\n}\nfunction hidden(node) {\n  return (node.properties || {}).hidden;\n}\nfunction closedDialog(node) {\n  return node.tagName === 'dialog' && !(node.properties || {}).open;\n}","map":{"version":3,"names":["repeat","require","convert","findAfter","module","exports","toText","searchLineFeeds","searchTabOrSpaces","br","p","cell","row","notRendered","hidden","closedDialog","blockOrCaption","node","children","block","whiteSpace","inferWhiteSpace","index","results","result","value","count","type","collectText","breakBefore","breakAfter","length","concat","innerTextCollection","undefined","push","join","parent","options","collectElement","collectPreText","_","items","prefix","suffix","unshift","String","lines","start","match","end","lastIndex","exec","trimAndcollapseSpacesAndTabs","slice","replace","charCodeAt","props","properties","inherit","tagName","wrap","noWrap","open"],"sources":["/home/kali/Desktop/react/React_Shopping_web/node_modules/hast-util-to-text/index.js"],"sourcesContent":["'use strict'\n\nvar repeat = require('repeat-string')\nvar convert = require('hast-util-is-element/convert')\nvar findAfter = require('unist-util-find-after')\n\nmodule.exports = toText\n\nvar searchLineFeeds = /\\n/g\nvar searchTabOrSpaces = /[\\t ]+/g\n\nvar br = convert('br')\nvar p = convert('p')\nvar cell = convert(['th', 'td'])\nvar row = convert('tr')\n\n// Note that we don’t need to include void elements here as they don’t have text.\n// See: <https://github.com/wooorm/html-void-elements>\nvar notRendered = convert([\n  // List from: <https://html.spec.whatwg.org/#hidden-elements>\n  'datalist',\n  'head',\n  'noembed',\n  'noframes',\n  'rp',\n  'script',\n  'style',\n  'template',\n  'title',\n  // Act as if we support scripting.\n  'noscript',\n  // Hidden attribute.\n  hidden,\n  // From: <https://html.spec.whatwg.org/#flow-content-3>\n  closedDialog\n])\n\n// See: <https://html.spec.whatwg.org/#the-css-user-agent-style-sheet-and-presentational-hints>\nvar blockOrCaption = convert([\n  'caption', // `table-caption`\n  // Page\n  'html',\n  'body',\n  // Flow content\n  'address',\n  'blockquote',\n  'center', // Legacy\n  'dialog',\n  'div',\n  'figure',\n  'figcaption',\n  'footer',\n  'form,',\n  'header',\n  'hr',\n  'legend',\n  'listing', // Legacy\n  'main',\n  'p',\n  'plaintext', // Legacy\n  'pre',\n  'xmp', // Legacy\n  // Sections and headings\n  'article',\n  'aside',\n  'h1',\n  'h2',\n  'h3',\n  'h4',\n  'h5',\n  'h6',\n  'hgroup',\n  'nav',\n  'section',\n  // Lists\n  'dir', // Legacy\n  'dd',\n  'dl',\n  'dt',\n  'menu',\n  'ol',\n  'ul'\n])\n\n// Implementation of the `innerText` getter:\n// <https://html.spec.whatwg.org/#the-innertext-idl-attribute>\n// Note that we act as if `node` is being rendered, and as if we’re a\n// CSS-supporting user agent.\nfunction toText(node) {\n  var children = node.children || []\n  var block = blockOrCaption(node)\n  var whiteSpace = inferWhiteSpace(node, {})\n  var index = -1\n  var results\n  var result\n  var value\n  var count\n\n  // Treat `text` and `comment` as having normal white-space.\n  // This deviates from the spec as in the DOM the node’s `.data` has to be\n  // returned.\n  // If you want that behavior use `hast-util-to-string`.\n  // All other nodes are later handled as if they are `element`s (so the\n  // algorithm also works on a `root`).\n  // Nodes without children are treated as a void element, so `doctype` is thus\n  // ignored.\n  if (node.type === 'text' || node.type === 'comment') {\n    return collectText(node, {\n      whiteSpace: whiteSpace,\n      breakBefore: true,\n      breakAfter: true\n    })\n  }\n\n  // 1.  If this element is not being rendered, or if the user agent is a\n  //     non-CSS user agent, then return the same value as the textContent IDL\n  //     attribute on this element.\n  //\n  //     Note: we’re not supporting stylesheets so we’re acting as if the node\n  //     is rendered.\n  //\n  //     If you want that behavior use `hast-util-to-string`.\n  //     Important: we’ll have to account for this later though.\n\n  // 2.  Let results be a new empty list.\n  results = []\n\n  // 3.  For each child node node of this element:\n  while (++index < children.length) {\n    // 3.1. Let current be the list resulting in running the inner text\n    //      collection steps with node.\n    //      Each item in results will either be a JavaScript string or a\n    //      positive integer (a required line break count).\n    // 3.2. For each item item in current, append item to results.\n    results = results.concat(\n      innerTextCollection(children[index], index, node, {\n        whiteSpace: whiteSpace,\n        breakBefore: index ? null : block,\n        breakAfter:\n          index < children.length - 1 ? br(children[index + 1]) : block\n      })\n    )\n  }\n\n  // 4.  Remove any items from results that are the empty string.\n  // 5.  Remove any runs of consecutive required line break count items at the\n  //     start or end of results.\n  // 6.  Replace each remaining run of consecutive required line break count\n  //     items with a string consisting of as many U+000A LINE FEED (LF)\n  //     characters as the maximum of the values in the required line break\n  //     count items.\n  index = -1\n  result = []\n\n  while (++index < results.length) {\n    value = results[index]\n\n    if (typeof value === 'number') {\n      if (count !== undefined && value > count) count = value\n    } else if (value) {\n      if (count) result.push(repeat('\\n', count))\n      count = 0\n      result.push(value)\n    }\n  }\n\n  // 7.  Return the concatenation of the string items in results.\n  return result.join('')\n}\n\n// <https://html.spec.whatwg.org/#inner-text-collection-steps>\nfunction innerTextCollection(node, index, parent, options) {\n  if (node.type === 'element') {\n    return collectElement(node, index, parent, options)\n  }\n\n  if (node.type === 'text') {\n    return [\n      options.whiteSpace === 'normal'\n        ? collectText(node, options)\n        : collectPreText(node, options)\n    ]\n  }\n\n  return []\n}\n\n// Collect an element.\nfunction collectElement(node, _, parent, options) {\n  // First we infer the `white-space` property.\n  var whiteSpace = inferWhiteSpace(node, options)\n  var children = node.children || []\n  var index = -1\n  var items = []\n  var prefix\n  var suffix\n\n  // We’re ignoring point 3, and exiting without any content here, because we\n  // deviated from the spec in `toText` at step 3.\n  if (notRendered(node)) {\n    return items\n  }\n\n  // Note: we first detect if there is going to be a break before or after the\n  // contents, as that changes the white-space handling.\n\n  // 2.  If node’s computed value of `visibility` is not `visible`, then return\n  //     items.\n  //\n  //     Note: Ignored, as everything is visible by default user agent styles.\n\n  // 3.  If node is not being rendered, then return items. [...]\n  //\n  //     Note: We already did this above.\n\n  // See `collectText` for step 4.\n\n  // 5.  If node is a `<br>` element, then append a string containing a single\n  //     U+000A LINE FEED (LF) character to items.\n  if (br(node)) {\n    suffix = '\\n'\n  }\n\n  // 7.  If node’s computed value of `display` is `table-row`, and node’s CSS\n  //     box is not the last `table-row` box of the nearest ancestor `table`\n  //     box, then append a string containing a single U+000A LINE FEED (LF)\n  //     character to items.\n  //\n  //     See: <https://html.spec.whatwg.org/#tables-2>\n  //     Note: needs further investigation as this does not account for implicit\n  //     rows.\n  else if (row(node) && findAfter(parent, node, row)) {\n    suffix = '\\n'\n  }\n\n  // 8.  If node is a `<p>` element, then append 2 (a required line break count)\n  //     at the beginning and end of items.\n  else if (p(node)) {\n    prefix = 2\n    suffix = 2\n  }\n\n  // 9.  If node’s used value of `display` is block-level or `table-caption`,\n  //     then append 1 (a required line break count) at the beginning and end of\n  //     items.\n  else if (blockOrCaption(node)) {\n    prefix = 1\n    suffix = 1\n  }\n\n  // 1.  Let items be the result of running the inner text collection steps with\n  //     each child node of node in tree order, and then concatenating the\n  //     results to a single list.\n  while (++index < children.length) {\n    items = items.concat(\n      innerTextCollection(children[index], index, node, {\n        whiteSpace: whiteSpace,\n        breakBefore: index ? null : prefix,\n        breakAfter:\n          index < children.length - 1 ? br(children[index + 1]) : suffix\n      })\n    )\n  }\n\n  // 6.  If node’s computed value of `display` is `table-cell`, and node’s CSS\n  //     box is not the last `table-cell` box of its enclosing `table-row` box,\n  //     then append a string containing a single U+0009 CHARACTER TABULATION\n  //     (tab) character to items.\n  //\n  //     See: <https://html.spec.whatwg.org/#tables-2>\n  if (cell(node) && findAfter(parent, node, cell)) {\n    items.push('\\t')\n  }\n\n  // Add the pre- and suffix.\n  if (prefix) items.unshift(prefix)\n  if (suffix) items.push(suffix)\n\n  return items\n}\n\n// 4.  If node is a Text node, then for each CSS text box produced by node,\n//     in content order, compute the text of the box after application of the\n//     CSS `white-space` processing rules and `text-transform` rules, set\n//     items to the list of the resulting strings, and return items.\n//     The CSS `white-space` processing rules are slightly modified:\n//     collapsible spaces at the end of lines are always collapsed, but they\n//     are only removed if the line is the last line of the block, or it ends\n//     with a br element.\n//     Soft hyphens should be preserved.\n//\n//     Note: See `collectText` and `collectPreText`.\n//     Note: we don’t deal with `text-transform`, no element has that by\n//     default.\n//\n// See: <https://drafts.csswg.org/css-text/#white-space-phase-1>\nfunction collectText(node, options) {\n  var value = String(node.value)\n  var lines = []\n  var result = []\n  var start = 0\n  var index = -1\n  var match\n  var end\n  var join\n\n  while (start < value.length) {\n    searchLineFeeds.lastIndex = start\n    match = searchLineFeeds.exec(value)\n    end = match ? match.index : value.length\n\n    lines.push(\n      // Any sequence of collapsible spaces and tabs immediately preceding or\n      // following a segment break is removed.\n      trimAndcollapseSpacesAndTabs(\n        // [...] ignoring bidi formatting characters (characters with the\n        // Bidi_Control property [UAX9]: ALM, LTR, RTL, LRE-RLO, LRI-PDI) as if\n        // they were not there.\n        value\n          .slice(start, end)\n          .replace(/[\\u061c\\u200e\\u200f\\u202a-\\u202e\\u2066-\\u2069]/g, ''),\n        options.breakBefore,\n        options.breakAfter\n      )\n    )\n\n    start = end + 1\n  }\n\n  // Collapsible segment breaks are transformed for rendering according to the\n  // segment break transformation rules.\n  // So here we jump to 4.1.2 of [CSSTEXT]:\n  // Any collapsible segment break immediately following another collapsible\n  // segment break is removed\n  while (++index < lines.length) {\n    // *   If the character immediately before or immediately after the segment\n    //     break is the zero-width space character (U+200B), then the break is\n    //     removed, leaving behind the zero-width space.\n    if (\n      lines[index].charCodeAt(lines[index].length - 1) === 0x200b /* ZWSP */ ||\n      (index < lines.length - 1 &&\n        lines[index + 1].charCodeAt(0) === 0x200b) /* ZWSP */\n    ) {\n      result.push(lines[index])\n      join = ''\n    }\n\n    // *   Otherwise, if the East Asian Width property [UAX11] of both the\n    //     character before and after the segment break is Fullwidth, Wide, or\n    //     Halfwidth (not Ambiguous), and neither side is Hangul, then the\n    //     segment break is removed.\n    //\n    //     Note: ignored.\n    // *   Otherwise, if the writing system of the segment break is Chinese,\n    //     Japanese, or Yi, and the character before or after the segment break\n    //     is punctuation or a symbol (Unicode general category P* or S*) and\n    //     has an East Asian Width property of Ambiguous, and the character on\n    //     the other side of the segment break is Fullwidth, Wide, or Halfwidth,\n    //     and not Hangul, then the segment break is removed.\n    //\n    //     Note: ignored.\n\n    // *   Otherwise, the segment break is converted to a space (U+0020).\n    else if (lines[index]) {\n      if (join) result.push(join)\n      result.push(lines[index])\n      join = ' '\n    }\n  }\n\n  return result.join('')\n}\n\nfunction collectPreText(node) {\n  return String(node.value)\n}\n\n// 3.  Every collapsible tab is converted to a collapsible space (U+0020).\n// 4.  Any collapsible space immediately following another collapsible\n//     space—even one outside the boundary of the inline containing that\n//     space, provided both spaces are within the same inline formatting\n//     context—is collapsed to have zero advance width. (It is invisible,\n//     but retains its soft wrap opportunity, if any.)\nfunction trimAndcollapseSpacesAndTabs(value, breakBefore, breakAfter) {\n  var result = []\n  var start = 0\n  var match\n  var end\n\n  while (start < value.length) {\n    searchTabOrSpaces.lastIndex = start\n    match = searchTabOrSpaces.exec(value)\n    end = match ? match.index : value.length\n\n    // If we’re not directly after a segment break, but there was white space,\n    // add an empty value that will be turned into a space.\n    if (!start && !end && match && !breakBefore) {\n      result.push('')\n    }\n\n    if (start !== end) {\n      result.push(value.slice(start, end))\n    }\n\n    start = match ? end + match[0].length : end\n  }\n\n  // If we reached the end, there was trailing white space, and there’s no\n  // segment break after this node, add an empty value that will be turned\n  // into a space.\n  if (start !== end && !breakAfter) {\n    result.push('')\n  }\n\n  return result.join(' ')\n}\n\n// We don’t support void elements here (so `nobr wbr` -> `normal` is ignored).\nfunction inferWhiteSpace(node, options) {\n  var props = node.properties || {}\n  var inherit = options.whiteSpace || 'normal'\n\n  switch (node.tagName) {\n    case 'listing':\n    case 'plaintext':\n    case 'xmp':\n      return 'pre'\n    case 'nobr':\n      return 'nowrap'\n    case 'pre':\n      return props.wrap ? 'pre-wrap' : 'pre'\n    case 'td':\n    case 'th':\n      return props.noWrap ? 'nowrap' : inherit\n    case 'textarea':\n      return 'pre-wrap'\n    default:\n      return inherit\n  }\n}\n\nfunction hidden(node) {\n  return (node.properties || {}).hidden\n}\n\nfunction closedDialog(node) {\n  return node.tagName === 'dialog' && !(node.properties || {}).open\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}