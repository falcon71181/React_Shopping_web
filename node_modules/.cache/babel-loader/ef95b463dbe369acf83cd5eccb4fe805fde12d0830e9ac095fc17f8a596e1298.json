{"ast":null,"code":"/**\n * @fileoverview\n *   Collapse whitespace.\n *\n *   Normally, collapses to a single space.\n *   If `newlines: true`, collapses whitespace containing newlines to `'\\n'`\n *   instead of `' '`.\n * @example\n *   <h1>Heading</h1>\n *   <p><strong>This</strong> and <em>that</em></p>\n */\n\n'use strict';\n\nvar is = require('hast-util-is-element');\nvar embedded = require('hast-util-embedded');\nvar convert = require('unist-util-is/convert');\nvar whitespace = require('hast-util-whitespace');\nvar blocks = require('./block');\nvar contents = require('./content');\nvar skippables = require('./skippable');\nmodule.exports = minifyWhitespace;\nvar ignorableNode = convert(['doctype', 'comment']);\nvar parent = convert(['element', 'root']);\nvar root = convert(['root']);\nvar element = convert(['element']);\nvar text = convert(['text']);\nfunction minifyWhitespace(options) {\n  var collapse = collapseFactory((options || {}).newlines ? replaceNewlines : replaceWhitespace);\n  return transform;\n  function transform(tree) {\n    minify(tree, {\n      collapse: collapse,\n      whitespace: 'normal'\n    });\n  }\n}\nfunction minify(node, options) {\n  var settings;\n  if (parent(node)) {\n    settings = Object.assign({}, options);\n    if (root(node) || blocklike(node)) {\n      settings.before = true;\n      settings.after = true;\n    }\n    settings.whitespace = inferWhiteSpace(node, options);\n    return all(node, settings);\n  }\n  if (text(node)) {\n    if (options.whitespace === 'normal') {\n      return minifyText(node, options);\n    }\n\n    // Naïve collapse, but no trimming:\n    if (options.whitespace === 'nowrap') {\n      node.value = options.collapse(node.value);\n    }\n\n    // The `pre-wrap` or `pre` whitespace settings are neither collapsed nor\n    // trimmed.\n  }\n\n  return {\n    remove: false,\n    ignore: ignorableNode(node),\n    stripAtStart: false\n  };\n}\nfunction minifyText(node, options) {\n  var value = options.collapse(node.value);\n  var start = 0;\n  var end = value.length;\n  var result = {\n    remove: false,\n    ignore: false,\n    stripAtStart: false\n  };\n  if (options.before && removable(value.charAt(0))) {\n    start++;\n  }\n  if (start !== end && removable(value.charAt(end - 1))) {\n    if (options.after) {\n      end--;\n    } else {\n      result.stripAtStart = true;\n    }\n  }\n  if (start === end) {\n    result.remove = true;\n  } else {\n    node.value = value.slice(start, end);\n  }\n  return result;\n}\nfunction all(parent, options) {\n  var before = options.before;\n  var after = options.after;\n  var children = parent.children;\n  var length = children.length;\n  var index = -1;\n  var result;\n  while (++index < length) {\n    result = minify(children[index], Object.assign({}, options, {\n      before: before,\n      after: collapsableAfter(children, index, after)\n    }));\n    if (result.remove) {\n      children.splice(index, 1);\n      index--;\n      length--;\n    } else if (!result.ignore) {\n      before = result.stripAtStart;\n    }\n\n    // If this element, such as a `<select>` or `<img>`, contributes content\n    // somehow, allow whitespace again.\n    if (content(children[index])) {\n      before = false;\n    }\n  }\n  return {\n    remove: false,\n    ignore: false,\n    stripAtStart: before || after\n  };\n}\nfunction collapsableAfter(nodes, index, after) {\n  var length = nodes.length;\n  var node;\n  var result;\n  while (++index < length) {\n    node = nodes[index];\n    result = inferBoundary(node);\n    if (result === undefined && node.children && !skippable(node)) {\n      result = collapsableAfter(node.children, -1);\n    }\n    if (typeof result === 'boolean') {\n      return result;\n    }\n  }\n  return after;\n}\n\n// Infer two types of boundaries:\n//\n// 1. `true` — boundary for which whitespace around it does not contribute\n//    anything\n// 2. `false` — boundary for which whitespace around it *does* contribute\n//\n// No result (`undefined`) is returned if it is unknown.\nfunction inferBoundary(node) {\n  if (element(node)) {\n    if (content(node)) {\n      return false;\n    }\n    if (blocklike(node)) {\n      return true;\n    }\n\n    // Unknown: either depends on siblings if embedded or metadata, or on\n    // children.\n  } else if (text(node)) {\n    if (!whitespace(node)) {\n      return false;\n    }\n  } else if (!ignorableNode(node)) {\n    return false;\n  }\n}\n\n// Infer whether a node is skippable.\nfunction content(node) {\n  return embedded(node) || is(node, contents);\n}\n\n// See: <https://html.spec.whatwg.org/#the-css-user-agent-style-sheet-and-presentational-hints>\nfunction blocklike(node) {\n  return is(node, blocks);\n}\nfunction skippable(node) {\n  /* istanbul ignore next - currently only used on elements, but just to make sure. */\n  var props = node.properties || {};\n  return ignorableNode(node) || is(node, skippables) || props.hidden;\n}\nfunction removable(character) {\n  return character === ' ' || character === '\\n';\n}\nfunction replaceNewlines(value) {\n  var match = /\\r?\\n|\\r/.exec(value);\n  return match ? match[0] : ' ';\n}\nfunction replaceWhitespace() {\n  return ' ';\n}\nfunction collapseFactory(replace) {\n  return collapse;\n  function collapse(value) {\n    return String(value).replace(/[\\t\\n\\v\\f\\r ]+/g, replace);\n  }\n}\n\n// We don’t support void elements here (so `nobr wbr` -> `normal` is ignored).\nfunction inferWhiteSpace(node, options) {\n  var props = node.properties || {};\n  switch (node.tagName) {\n    case 'listing':\n    case 'plaintext':\n    case 'xmp':\n      return 'pre';\n    case 'nobr':\n      return 'nowrap';\n    case 'pre':\n      return props.wrap ? 'pre-wrap' : 'pre';\n    case 'td':\n    case 'th':\n      return props.noWrap ? 'nowrap' : options.whitespace;\n    case 'textarea':\n      return 'pre-wrap';\n    default:\n      return options.whitespace;\n  }\n}","map":{"version":3,"names":["is","require","embedded","convert","whitespace","blocks","contents","skippables","module","exports","minifyWhitespace","ignorableNode","parent","root","element","text","options","collapse","collapseFactory","newlines","replaceNewlines","replaceWhitespace","transform","tree","minify","node","settings","Object","assign","blocklike","before","after","inferWhiteSpace","all","minifyText","value","remove","ignore","stripAtStart","start","end","length","result","removable","charAt","slice","children","index","collapsableAfter","splice","content","nodes","inferBoundary","undefined","skippable","props","properties","hidden","character","match","exec","replace","String","tagName","wrap","noWrap"],"sources":["/home/kali/Desktop/react/React_Shopping_web/node_modules/rehype-minify-whitespace/index.js"],"sourcesContent":["/**\n * @fileoverview\n *   Collapse whitespace.\n *\n *   Normally, collapses to a single space.\n *   If `newlines: true`, collapses whitespace containing newlines to `'\\n'`\n *   instead of `' '`.\n * @example\n *   <h1>Heading</h1>\n *   <p><strong>This</strong> and <em>that</em></p>\n */\n\n'use strict'\n\nvar is = require('hast-util-is-element')\nvar embedded = require('hast-util-embedded')\nvar convert = require('unist-util-is/convert')\nvar whitespace = require('hast-util-whitespace')\nvar blocks = require('./block')\nvar contents = require('./content')\nvar skippables = require('./skippable')\n\nmodule.exports = minifyWhitespace\n\nvar ignorableNode = convert(['doctype', 'comment'])\nvar parent = convert(['element', 'root'])\nvar root = convert(['root'])\nvar element = convert(['element'])\nvar text = convert(['text'])\n\nfunction minifyWhitespace(options) {\n  var collapse = collapseFactory(\n    (options || {}).newlines ? replaceNewlines : replaceWhitespace\n  )\n\n  return transform\n\n  function transform(tree) {\n    minify(tree, {collapse: collapse, whitespace: 'normal'})\n  }\n}\n\nfunction minify(node, options) {\n  var settings\n\n  if (parent(node)) {\n    settings = Object.assign({}, options)\n\n    if (root(node) || blocklike(node)) {\n      settings.before = true\n      settings.after = true\n    }\n\n    settings.whitespace = inferWhiteSpace(node, options)\n\n    return all(node, settings)\n  }\n\n  if (text(node)) {\n    if (options.whitespace === 'normal') {\n      return minifyText(node, options)\n    }\n\n    // Naïve collapse, but no trimming:\n    if (options.whitespace === 'nowrap') {\n      node.value = options.collapse(node.value)\n    }\n\n    // The `pre-wrap` or `pre` whitespace settings are neither collapsed nor\n    // trimmed.\n  }\n\n  return {\n    remove: false,\n    ignore: ignorableNode(node),\n    stripAtStart: false\n  }\n}\n\nfunction minifyText(node, options) {\n  var value = options.collapse(node.value)\n  var start = 0\n  var end = value.length\n  var result = {remove: false, ignore: false, stripAtStart: false}\n\n  if (options.before && removable(value.charAt(0))) {\n    start++\n  }\n\n  if (start !== end && removable(value.charAt(end - 1))) {\n    if (options.after) {\n      end--\n    } else {\n      result.stripAtStart = true\n    }\n  }\n\n  if (start === end) {\n    result.remove = true\n  } else {\n    node.value = value.slice(start, end)\n  }\n\n  return result\n}\n\nfunction all(parent, options) {\n  var before = options.before\n  var after = options.after\n  var children = parent.children\n  var length = children.length\n  var index = -1\n  var result\n\n  while (++index < length) {\n    result = minify(\n      children[index],\n      Object.assign({}, options, {\n        before: before,\n        after: collapsableAfter(children, index, after)\n      })\n    )\n\n    if (result.remove) {\n      children.splice(index, 1)\n      index--\n      length--\n    } else if (!result.ignore) {\n      before = result.stripAtStart\n    }\n\n    // If this element, such as a `<select>` or `<img>`, contributes content\n    // somehow, allow whitespace again.\n    if (content(children[index])) {\n      before = false\n    }\n  }\n\n  return {\n    remove: false,\n    ignore: false,\n    stripAtStart: before || after\n  }\n}\n\nfunction collapsableAfter(nodes, index, after) {\n  var length = nodes.length\n  var node\n  var result\n\n  while (++index < length) {\n    node = nodes[index]\n    result = inferBoundary(node)\n\n    if (result === undefined && node.children && !skippable(node)) {\n      result = collapsableAfter(node.children, -1)\n    }\n\n    if (typeof result === 'boolean') {\n      return result\n    }\n  }\n\n  return after\n}\n\n// Infer two types of boundaries:\n//\n// 1. `true` — boundary for which whitespace around it does not contribute\n//    anything\n// 2. `false` — boundary for which whitespace around it *does* contribute\n//\n// No result (`undefined`) is returned if it is unknown.\nfunction inferBoundary(node) {\n  if (element(node)) {\n    if (content(node)) {\n      return false\n    }\n\n    if (blocklike(node)) {\n      return true\n    }\n\n    // Unknown: either depends on siblings if embedded or metadata, or on\n    // children.\n  } else if (text(node)) {\n    if (!whitespace(node)) {\n      return false\n    }\n  } else if (!ignorableNode(node)) {\n    return false\n  }\n}\n\n// Infer whether a node is skippable.\nfunction content(node) {\n  return embedded(node) || is(node, contents)\n}\n\n// See: <https://html.spec.whatwg.org/#the-css-user-agent-style-sheet-and-presentational-hints>\nfunction blocklike(node) {\n  return is(node, blocks)\n}\n\nfunction skippable(node) {\n  /* istanbul ignore next - currently only used on elements, but just to make sure. */\n  var props = node.properties || {}\n\n  return ignorableNode(node) || is(node, skippables) || props.hidden\n}\n\nfunction removable(character) {\n  return character === ' ' || character === '\\n'\n}\n\nfunction replaceNewlines(value) {\n  var match = /\\r?\\n|\\r/.exec(value)\n  return match ? match[0] : ' '\n}\n\nfunction replaceWhitespace() {\n  return ' '\n}\n\nfunction collapseFactory(replace) {\n  return collapse\n  function collapse(value) {\n    return String(value).replace(/[\\t\\n\\v\\f\\r ]+/g, replace)\n  }\n}\n\n// We don’t support void elements here (so `nobr wbr` -> `normal` is ignored).\nfunction inferWhiteSpace(node, options) {\n  var props = node.properties || {}\n\n  switch (node.tagName) {\n    case 'listing':\n    case 'plaintext':\n    case 'xmp':\n      return 'pre'\n    case 'nobr':\n      return 'nowrap'\n    case 'pre':\n      return props.wrap ? 'pre-wrap' : 'pre'\n    case 'td':\n    case 'th':\n      return props.noWrap ? 'nowrap' : options.whitespace\n    case 'textarea':\n      return 'pre-wrap'\n    default:\n      return options.whitespace\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}