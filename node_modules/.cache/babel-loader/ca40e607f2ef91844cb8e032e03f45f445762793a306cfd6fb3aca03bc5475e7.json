{"ast":null,"code":"'use strict';\n\nvar whitespace = require('is-whitespace-character');\nvar locate = require('../locate/link');\nmodule.exports = link;\nlink.locator = locate;\nvar lineFeed = '\\n';\nvar exclamationMark = '!';\nvar quotationMark = '\"';\nvar apostrophe = \"'\";\nvar leftParenthesis = '(';\nvar rightParenthesis = ')';\nvar lessThan = '<';\nvar greaterThan = '>';\nvar leftSquareBracket = '[';\nvar backslash = '\\\\';\nvar rightSquareBracket = ']';\nvar graveAccent = '`';\nfunction link(eat, value, silent) {\n  var self = this;\n  var subvalue = '';\n  var index = 0;\n  var character = value.charAt(0);\n  var pedantic = self.options.pedantic;\n  var commonmark = self.options.commonmark;\n  var gfm = self.options.gfm;\n  var closed;\n  var count;\n  var opening;\n  var beforeURL;\n  var beforeTitle;\n  var subqueue;\n  var hasMarker;\n  var isImage;\n  var content;\n  var marker;\n  var length;\n  var title;\n  var depth;\n  var queue;\n  var url;\n  var now;\n  var exit;\n  var node;\n\n  // Detect whether this is an image.\n  if (character === exclamationMark) {\n    isImage = true;\n    subvalue = character;\n    character = value.charAt(++index);\n  }\n\n  // Eat the opening.\n  if (character !== leftSquareBracket) {\n    return;\n  }\n\n  // Exit when this is a link and we’re already inside a link.\n  if (!isImage && self.inLink) {\n    return;\n  }\n  subvalue += character;\n  queue = '';\n  index++;\n\n  // Eat the content.\n  length = value.length;\n  now = eat.now();\n  depth = 0;\n  now.column += index;\n  now.offset += index;\n  while (index < length) {\n    character = value.charAt(index);\n    subqueue = character;\n    if (character === graveAccent) {\n      // Inline-code in link content.\n      count = 1;\n      while (value.charAt(index + 1) === graveAccent) {\n        subqueue += character;\n        index++;\n        count++;\n      }\n      if (!opening) {\n        opening = count;\n      } else if (count >= opening) {\n        opening = 0;\n      }\n    } else if (character === backslash) {\n      // Allow brackets to be escaped.\n      index++;\n      subqueue += value.charAt(index);\n    } else if ((!opening || gfm) && character === leftSquareBracket) {\n      // In GFM mode, brackets in code still count.  In all other modes,\n      // they don’t.\n      depth++;\n    } else if ((!opening || gfm) && character === rightSquareBracket) {\n      if (depth) {\n        depth--;\n      } else {\n        if (value.charAt(index + 1) !== leftParenthesis) {\n          return;\n        }\n        subqueue += leftParenthesis;\n        closed = true;\n        index++;\n        break;\n      }\n    }\n    queue += subqueue;\n    subqueue = '';\n    index++;\n  }\n\n  // Eat the content closing.\n  if (!closed) {\n    return;\n  }\n  content = queue;\n  subvalue += queue + subqueue;\n  index++;\n\n  // Eat white-space.\n  while (index < length) {\n    character = value.charAt(index);\n    if (!whitespace(character)) {\n      break;\n    }\n    subvalue += character;\n    index++;\n  }\n\n  // Eat the URL.\n  character = value.charAt(index);\n  queue = '';\n  beforeURL = subvalue;\n  if (character === lessThan) {\n    index++;\n    beforeURL += lessThan;\n    while (index < length) {\n      character = value.charAt(index);\n      if (character === greaterThan) {\n        break;\n      }\n      if (commonmark && character === lineFeed) {\n        return;\n      }\n      queue += character;\n      index++;\n    }\n    if (value.charAt(index) !== greaterThan) {\n      return;\n    }\n    subvalue += lessThan + queue + greaterThan;\n    url = queue;\n    index++;\n  } else {\n    character = null;\n    subqueue = '';\n    while (index < length) {\n      character = value.charAt(index);\n      if (subqueue && (character === quotationMark || character === apostrophe || commonmark && character === leftParenthesis)) {\n        break;\n      }\n      if (whitespace(character)) {\n        if (!pedantic) {\n          break;\n        }\n        subqueue += character;\n      } else {\n        if (character === leftParenthesis) {\n          depth++;\n        } else if (character === rightParenthesis) {\n          if (depth === 0) {\n            break;\n          }\n          depth--;\n        }\n        queue += subqueue;\n        subqueue = '';\n        if (character === backslash) {\n          queue += backslash;\n          character = value.charAt(++index);\n        }\n        queue += character;\n      }\n      index++;\n    }\n    subvalue += queue;\n    url = queue;\n    index = subvalue.length;\n  }\n\n  // Eat white-space.\n  queue = '';\n  while (index < length) {\n    character = value.charAt(index);\n    if (!whitespace(character)) {\n      break;\n    }\n    queue += character;\n    index++;\n  }\n  character = value.charAt(index);\n  subvalue += queue;\n\n  // Eat the title.\n  if (queue && (character === quotationMark || character === apostrophe || commonmark && character === leftParenthesis)) {\n    index++;\n    subvalue += character;\n    queue = '';\n    marker = character === leftParenthesis ? rightParenthesis : character;\n    beforeTitle = subvalue;\n\n    // In commonmark-mode, things are pretty easy: the marker cannot occur\n    // inside the title.  Non-commonmark does, however, support nested\n    // delimiters.\n    if (commonmark) {\n      while (index < length) {\n        character = value.charAt(index);\n        if (character === marker) {\n          break;\n        }\n        if (character === backslash) {\n          queue += backslash;\n          character = value.charAt(++index);\n        }\n        index++;\n        queue += character;\n      }\n      character = value.charAt(index);\n      if (character !== marker) {\n        return;\n      }\n      title = queue;\n      subvalue += queue + character;\n      index++;\n      while (index < length) {\n        character = value.charAt(index);\n        if (!whitespace(character)) {\n          break;\n        }\n        subvalue += character;\n        index++;\n      }\n    } else {\n      subqueue = '';\n      while (index < length) {\n        character = value.charAt(index);\n        if (character === marker) {\n          if (hasMarker) {\n            queue += marker + subqueue;\n            subqueue = '';\n          }\n          hasMarker = true;\n        } else if (!hasMarker) {\n          queue += character;\n        } else if (character === rightParenthesis) {\n          subvalue += queue + marker + subqueue;\n          title = queue;\n          break;\n        } else if (whitespace(character)) {\n          subqueue += character;\n        } else {\n          queue += marker + subqueue + character;\n          subqueue = '';\n          hasMarker = false;\n        }\n        index++;\n      }\n    }\n  }\n  if (value.charAt(index) !== rightParenthesis) {\n    return;\n  }\n\n  /* istanbul ignore if - never used (yet) */\n  if (silent) {\n    return true;\n  }\n  subvalue += rightParenthesis;\n  url = self.decode.raw(self.unescape(url), eat(beforeURL).test().end, {\n    nonTerminated: false\n  });\n  if (title) {\n    beforeTitle = eat(beforeTitle).test().end;\n    title = self.decode.raw(self.unescape(title), beforeTitle);\n  }\n  node = {\n    type: isImage ? 'image' : 'link',\n    title: title || null,\n    url: url\n  };\n  if (isImage) {\n    node.alt = self.decode.raw(self.unescape(content), now) || null;\n  } else {\n    exit = self.enterLink();\n    node.children = self.tokenizeInline(content, now);\n    exit();\n  }\n  return eat(subvalue)(node);\n}","map":{"version":3,"names":["whitespace","require","locate","module","exports","link","locator","lineFeed","exclamationMark","quotationMark","apostrophe","leftParenthesis","rightParenthesis","lessThan","greaterThan","leftSquareBracket","backslash","rightSquareBracket","graveAccent","eat","value","silent","self","subvalue","index","character","charAt","pedantic","options","commonmark","gfm","closed","count","opening","beforeURL","beforeTitle","subqueue","hasMarker","isImage","content","marker","length","title","depth","queue","url","now","exit","node","inLink","column","offset","decode","raw","unescape","test","end","nonTerminated","type","alt","enterLink","children","tokenizeInline"],"sources":["/home/kali/Desktop/react/React_Shopping_web/node_modules/remark-parse/lib/tokenize/link.js"],"sourcesContent":["'use strict'\n\nvar whitespace = require('is-whitespace-character')\nvar locate = require('../locate/link')\n\nmodule.exports = link\nlink.locator = locate\n\nvar lineFeed = '\\n'\nvar exclamationMark = '!'\nvar quotationMark = '\"'\nvar apostrophe = \"'\"\nvar leftParenthesis = '('\nvar rightParenthesis = ')'\nvar lessThan = '<'\nvar greaterThan = '>'\nvar leftSquareBracket = '['\nvar backslash = '\\\\'\nvar rightSquareBracket = ']'\nvar graveAccent = '`'\n\nfunction link(eat, value, silent) {\n  var self = this\n  var subvalue = ''\n  var index = 0\n  var character = value.charAt(0)\n  var pedantic = self.options.pedantic\n  var commonmark = self.options.commonmark\n  var gfm = self.options.gfm\n  var closed\n  var count\n  var opening\n  var beforeURL\n  var beforeTitle\n  var subqueue\n  var hasMarker\n  var isImage\n  var content\n  var marker\n  var length\n  var title\n  var depth\n  var queue\n  var url\n  var now\n  var exit\n  var node\n\n  // Detect whether this is an image.\n  if (character === exclamationMark) {\n    isImage = true\n    subvalue = character\n    character = value.charAt(++index)\n  }\n\n  // Eat the opening.\n  if (character !== leftSquareBracket) {\n    return\n  }\n\n  // Exit when this is a link and we’re already inside a link.\n  if (!isImage && self.inLink) {\n    return\n  }\n\n  subvalue += character\n  queue = ''\n  index++\n\n  // Eat the content.\n  length = value.length\n  now = eat.now()\n  depth = 0\n\n  now.column += index\n  now.offset += index\n\n  while (index < length) {\n    character = value.charAt(index)\n    subqueue = character\n\n    if (character === graveAccent) {\n      // Inline-code in link content.\n      count = 1\n\n      while (value.charAt(index + 1) === graveAccent) {\n        subqueue += character\n        index++\n        count++\n      }\n\n      if (!opening) {\n        opening = count\n      } else if (count >= opening) {\n        opening = 0\n      }\n    } else if (character === backslash) {\n      // Allow brackets to be escaped.\n      index++\n      subqueue += value.charAt(index)\n    } else if ((!opening || gfm) && character === leftSquareBracket) {\n      // In GFM mode, brackets in code still count.  In all other modes,\n      // they don’t.\n      depth++\n    } else if ((!opening || gfm) && character === rightSquareBracket) {\n      if (depth) {\n        depth--\n      } else {\n        if (value.charAt(index + 1) !== leftParenthesis) {\n          return\n        }\n\n        subqueue += leftParenthesis\n        closed = true\n        index++\n\n        break\n      }\n    }\n\n    queue += subqueue\n    subqueue = ''\n    index++\n  }\n\n  // Eat the content closing.\n  if (!closed) {\n    return\n  }\n\n  content = queue\n  subvalue += queue + subqueue\n  index++\n\n  // Eat white-space.\n  while (index < length) {\n    character = value.charAt(index)\n\n    if (!whitespace(character)) {\n      break\n    }\n\n    subvalue += character\n    index++\n  }\n\n  // Eat the URL.\n  character = value.charAt(index)\n  queue = ''\n  beforeURL = subvalue\n\n  if (character === lessThan) {\n    index++\n    beforeURL += lessThan\n\n    while (index < length) {\n      character = value.charAt(index)\n\n      if (character === greaterThan) {\n        break\n      }\n\n      if (commonmark && character === lineFeed) {\n        return\n      }\n\n      queue += character\n      index++\n    }\n\n    if (value.charAt(index) !== greaterThan) {\n      return\n    }\n\n    subvalue += lessThan + queue + greaterThan\n    url = queue\n    index++\n  } else {\n    character = null\n    subqueue = ''\n\n    while (index < length) {\n      character = value.charAt(index)\n\n      if (\n        subqueue &&\n        (character === quotationMark ||\n          character === apostrophe ||\n          (commonmark && character === leftParenthesis))\n      ) {\n        break\n      }\n\n      if (whitespace(character)) {\n        if (!pedantic) {\n          break\n        }\n\n        subqueue += character\n      } else {\n        if (character === leftParenthesis) {\n          depth++\n        } else if (character === rightParenthesis) {\n          if (depth === 0) {\n            break\n          }\n\n          depth--\n        }\n\n        queue += subqueue\n        subqueue = ''\n\n        if (character === backslash) {\n          queue += backslash\n          character = value.charAt(++index)\n        }\n\n        queue += character\n      }\n\n      index++\n    }\n\n    subvalue += queue\n    url = queue\n    index = subvalue.length\n  }\n\n  // Eat white-space.\n  queue = ''\n\n  while (index < length) {\n    character = value.charAt(index)\n\n    if (!whitespace(character)) {\n      break\n    }\n\n    queue += character\n    index++\n  }\n\n  character = value.charAt(index)\n  subvalue += queue\n\n  // Eat the title.\n  if (\n    queue &&\n    (character === quotationMark ||\n      character === apostrophe ||\n      (commonmark && character === leftParenthesis))\n  ) {\n    index++\n    subvalue += character\n    queue = ''\n    marker = character === leftParenthesis ? rightParenthesis : character\n    beforeTitle = subvalue\n\n    // In commonmark-mode, things are pretty easy: the marker cannot occur\n    // inside the title.  Non-commonmark does, however, support nested\n    // delimiters.\n    if (commonmark) {\n      while (index < length) {\n        character = value.charAt(index)\n\n        if (character === marker) {\n          break\n        }\n\n        if (character === backslash) {\n          queue += backslash\n          character = value.charAt(++index)\n        }\n\n        index++\n        queue += character\n      }\n\n      character = value.charAt(index)\n\n      if (character !== marker) {\n        return\n      }\n\n      title = queue\n      subvalue += queue + character\n      index++\n\n      while (index < length) {\n        character = value.charAt(index)\n\n        if (!whitespace(character)) {\n          break\n        }\n\n        subvalue += character\n        index++\n      }\n    } else {\n      subqueue = ''\n\n      while (index < length) {\n        character = value.charAt(index)\n\n        if (character === marker) {\n          if (hasMarker) {\n            queue += marker + subqueue\n            subqueue = ''\n          }\n\n          hasMarker = true\n        } else if (!hasMarker) {\n          queue += character\n        } else if (character === rightParenthesis) {\n          subvalue += queue + marker + subqueue\n          title = queue\n          break\n        } else if (whitespace(character)) {\n          subqueue += character\n        } else {\n          queue += marker + subqueue + character\n          subqueue = ''\n          hasMarker = false\n        }\n\n        index++\n      }\n    }\n  }\n\n  if (value.charAt(index) !== rightParenthesis) {\n    return\n  }\n\n  /* istanbul ignore if - never used (yet) */\n  if (silent) {\n    return true\n  }\n\n  subvalue += rightParenthesis\n\n  url = self.decode.raw(self.unescape(url), eat(beforeURL).test().end, {\n    nonTerminated: false\n  })\n\n  if (title) {\n    beforeTitle = eat(beforeTitle).test().end\n    title = self.decode.raw(self.unescape(title), beforeTitle)\n  }\n\n  node = {\n    type: isImage ? 'image' : 'link',\n    title: title || null,\n    url: url\n  }\n\n  if (isImage) {\n    node.alt = self.decode.raw(self.unescape(content), now) || null\n  } else {\n    exit = self.enterLink()\n    node.children = self.tokenizeInline(content, now)\n    exit()\n  }\n\n  return eat(subvalue)(node)\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}