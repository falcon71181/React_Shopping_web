{"ast":null,"code":"'use strict';\n\nvar locate = require('../locate/code-inline');\nmodule.exports = inlineCode;\ninlineCode.locator = locate;\nvar lineFeed = 10; //  '\\n'\nvar space = 32; // ' '\nvar graveAccent = 96; //  '`'\n\nfunction inlineCode(eat, value, silent) {\n  var length = value.length;\n  var index = 0;\n  var openingFenceEnd;\n  var closingFenceStart;\n  var closingFenceEnd;\n  var code;\n  var next;\n  var found;\n  while (index < length) {\n    if (value.charCodeAt(index) !== graveAccent) {\n      break;\n    }\n    index++;\n  }\n  if (index === 0 || index === length) {\n    return;\n  }\n  openingFenceEnd = index;\n  next = value.charCodeAt(index);\n  while (index < length) {\n    code = next;\n    next = value.charCodeAt(index + 1);\n    if (code === graveAccent) {\n      if (closingFenceStart === undefined) {\n        closingFenceStart = index;\n      }\n      closingFenceEnd = index + 1;\n      if (next !== graveAccent && closingFenceEnd - closingFenceStart === openingFenceEnd) {\n        found = true;\n        break;\n      }\n    } else if (closingFenceStart !== undefined) {\n      closingFenceStart = undefined;\n      closingFenceEnd = undefined;\n    }\n    index++;\n  }\n  if (!found) {\n    return;\n  }\n\n  /* istanbul ignore if - never used (yet) */\n  if (silent) {\n    return true;\n  }\n\n  // Remove the initial and final space (or line feed), iff they exist and there\n  // are non-space characters in the content.\n  index = openingFenceEnd;\n  length = closingFenceStart;\n  code = value.charCodeAt(index);\n  next = value.charCodeAt(length - 1);\n  found = false;\n  if (length - index > 2 && (code === space || code === lineFeed) && (next === space || next === lineFeed)) {\n    index++;\n    length--;\n    while (index < length) {\n      code = value.charCodeAt(index);\n      if (code !== space && code !== lineFeed) {\n        found = true;\n        break;\n      }\n      index++;\n    }\n    if (found === true) {\n      openingFenceEnd++;\n      closingFenceStart--;\n    }\n  }\n  return eat(value.slice(0, closingFenceEnd))({\n    type: 'inlineCode',\n    value: value.slice(openingFenceEnd, closingFenceStart)\n  });\n}","map":{"version":3,"names":["locate","require","module","exports","inlineCode","locator","lineFeed","space","graveAccent","eat","value","silent","length","index","openingFenceEnd","closingFenceStart","closingFenceEnd","code","next","found","charCodeAt","undefined","slice","type"],"sources":["/home/kali/Desktop/react/React_Shopping_web/node_modules/remark-parse/lib/tokenize/code-inline.js"],"sourcesContent":["'use strict'\n\nvar locate = require('../locate/code-inline')\n\nmodule.exports = inlineCode\ninlineCode.locator = locate\n\nvar lineFeed = 10 //  '\\n'\nvar space = 32 // ' '\nvar graveAccent = 96 //  '`'\n\nfunction inlineCode(eat, value, silent) {\n  var length = value.length\n  var index = 0\n  var openingFenceEnd\n  var closingFenceStart\n  var closingFenceEnd\n  var code\n  var next\n  var found\n\n  while (index < length) {\n    if (value.charCodeAt(index) !== graveAccent) {\n      break\n    }\n\n    index++\n  }\n\n  if (index === 0 || index === length) {\n    return\n  }\n\n  openingFenceEnd = index\n  next = value.charCodeAt(index)\n\n  while (index < length) {\n    code = next\n    next = value.charCodeAt(index + 1)\n\n    if (code === graveAccent) {\n      if (closingFenceStart === undefined) {\n        closingFenceStart = index\n      }\n\n      closingFenceEnd = index + 1\n\n      if (\n        next !== graveAccent &&\n        closingFenceEnd - closingFenceStart === openingFenceEnd\n      ) {\n        found = true\n        break\n      }\n    } else if (closingFenceStart !== undefined) {\n      closingFenceStart = undefined\n      closingFenceEnd = undefined\n    }\n\n    index++\n  }\n\n  if (!found) {\n    return\n  }\n\n  /* istanbul ignore if - never used (yet) */\n  if (silent) {\n    return true\n  }\n\n  // Remove the initial and final space (or line feed), iff they exist and there\n  // are non-space characters in the content.\n  index = openingFenceEnd\n  length = closingFenceStart\n  code = value.charCodeAt(index)\n  next = value.charCodeAt(length - 1)\n  found = false\n\n  if (\n    length - index > 2 &&\n    (code === space || code === lineFeed) &&\n    (next === space || next === lineFeed)\n  ) {\n    index++\n    length--\n\n    while (index < length) {\n      code = value.charCodeAt(index)\n\n      if (code !== space && code !== lineFeed) {\n        found = true\n        break\n      }\n\n      index++\n    }\n\n    if (found === true) {\n      openingFenceEnd++\n      closingFenceStart--\n    }\n  }\n\n  return eat(value.slice(0, closingFenceEnd))({\n    type: 'inlineCode',\n    value: value.slice(openingFenceEnd, closingFenceStart)\n  })\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}