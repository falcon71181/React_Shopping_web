{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport formatInteger from './formatInteger';\nimport isValidNumberValue from './isValidNumberValue';\nexport default function normalizeValue(_ref) {\n  var value = _ref.value,\n    locale = _ref.locale,\n    decimalSeparator = _ref.decimalSeparator,\n    options = _ref.options;\n  var stringValue = String(value);\n  if (value === '-') {\n    return value;\n  }\n  if (isValidNumberValue(value)) {\n    var _stringValue$split = stringValue.split('.'),\n      _stringValue$split2 = _slicedToArray(_stringValue$split, 2),\n      integer = _stringValue$split2[0],\n      fraction = _stringValue$split2[1];\n    var formattedInteger = formatInteger({\n      integer: integer,\n      locale: locale,\n      options: options\n    });\n    return stringValue.indexOf('.') !== -1 ? \"\".concat(formattedInteger).concat(decimalSeparator).concat(fraction || '') : formattedInteger;\n  }\n  return '';\n}","map":{"version":3,"names":["_slicedToArray","formatInteger","isValidNumberValue","normalizeValue","_ref","value","locale","decimalSeparator","options","stringValue","String","_stringValue$split","split","_stringValue$split2","integer","fraction","formattedInteger","indexOf","concat"],"sources":["/home/kali/Desktop/react/React_Shopping_web/node_modules/react-rainbow-components/esm/components/CurrencyInput/helpers/normalizeValue.js"],"sourcesContent":["import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport formatInteger from './formatInteger';\nimport isValidNumberValue from './isValidNumberValue';\nexport default function normalizeValue(_ref) {\n  var value = _ref.value,\n      locale = _ref.locale,\n      decimalSeparator = _ref.decimalSeparator,\n      options = _ref.options;\n  var stringValue = String(value);\n\n  if (value === '-') {\n    return value;\n  }\n\n  if (isValidNumberValue(value)) {\n    var _stringValue$split = stringValue.split('.'),\n        _stringValue$split2 = _slicedToArray(_stringValue$split, 2),\n        integer = _stringValue$split2[0],\n        fraction = _stringValue$split2[1];\n\n    var formattedInteger = formatInteger({\n      integer: integer,\n      locale: locale,\n      options: options\n    });\n    return stringValue.indexOf('.') !== -1 ? \"\".concat(formattedInteger).concat(decimalSeparator).concat(fraction || '') : formattedInteger;\n  }\n\n  return '';\n}"],"mappings":"AAAA,OAAOA,cAAc,MAAM,sCAAsC;AACjE,OAAOC,aAAa,MAAM,iBAAiB;AAC3C,OAAOC,kBAAkB,MAAM,sBAAsB;AACrD,eAAe,SAASC,cAAcA,CAACC,IAAI,EAAE;EAC3C,IAAIC,KAAK,GAAGD,IAAI,CAACC,KAAK;IAClBC,MAAM,GAAGF,IAAI,CAACE,MAAM;IACpBC,gBAAgB,GAAGH,IAAI,CAACG,gBAAgB;IACxCC,OAAO,GAAGJ,IAAI,CAACI,OAAO;EAC1B,IAAIC,WAAW,GAAGC,MAAM,CAACL,KAAK,CAAC;EAE/B,IAAIA,KAAK,KAAK,GAAG,EAAE;IACjB,OAAOA,KAAK;EACd;EAEA,IAAIH,kBAAkB,CAACG,KAAK,CAAC,EAAE;IAC7B,IAAIM,kBAAkB,GAAGF,WAAW,CAACG,KAAK,CAAC,GAAG,CAAC;MAC3CC,mBAAmB,GAAGb,cAAc,CAACW,kBAAkB,EAAE,CAAC,CAAC;MAC3DG,OAAO,GAAGD,mBAAmB,CAAC,CAAC,CAAC;MAChCE,QAAQ,GAAGF,mBAAmB,CAAC,CAAC,CAAC;IAErC,IAAIG,gBAAgB,GAAGf,aAAa,CAAC;MACnCa,OAAO,EAAEA,OAAO;MAChBR,MAAM,EAAEA,MAAM;MACdE,OAAO,EAAEA;IACX,CAAC,CAAC;IACF,OAAOC,WAAW,CAACQ,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,GAAG,EAAE,CAACC,MAAM,CAACF,gBAAgB,CAAC,CAACE,MAAM,CAACX,gBAAgB,CAAC,CAACW,MAAM,CAACH,QAAQ,IAAI,EAAE,CAAC,GAAGC,gBAAgB;EACzI;EAEA,OAAO,EAAE;AACX"},"metadata":{},"sourceType":"module","externalDependencies":[]}