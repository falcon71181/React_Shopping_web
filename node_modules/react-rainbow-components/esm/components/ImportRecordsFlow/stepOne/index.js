import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
import React, { useState, useEffect } from 'react';
import PropTypes from 'prop-types';
import VisualPickerOption from '../../VisualPickerOption';
import VisualPickerOptionFooter from '../../VisualPickerOptionFooter';
import RenderIf from '../../RenderIf';
import Select from '../../Select';
import AddRecordsIcon from '../icons/addRecords';
import MergeRecordsIcon from '../icons/mergeRecords';
import getSchemaFieldOptions from '../helpers/getSchemaFieldOptions';
import StyledContainer from './styled/container';
import StyledVisualPicker from './styled/visualPicker';
export default function StepOne(props) {
  var schemaFields = props.schemaFields,
      actionOption = props.actionOption,
      onChangeAction = props.onChangeAction,
      matchField = props.matchField,
      onChangeMatchField = props.onChangeMatchField;

  var _useState = useState([]),
      _useState2 = _slicedToArray(_useState, 2),
      fieldOptions = _useState2[0],
      setFieldOptions = _useState2[1];

  var isMergeOption = actionOption === 'merge-records';
  useEffect(function () {
    setFieldOptions(getSchemaFieldOptions(schemaFields));
  }, [schemaFields]);
  return React.createElement(StyledContainer, null, React.createElement(StyledVisualPicker, {
    label: "Select the option type that do you want to do",
    onChange: onChangeAction,
    value: actionOption
  }, React.createElement(VisualPickerOption, {
    name: "add-records",
    footer: React.createElement(VisualPickerOptionFooter, {
      label: "Add new records"
    })
  }, React.createElement(AddRecordsIcon, null)), React.createElement(VisualPickerOption, {
    name: "merge-records",
    footer: React.createElement(VisualPickerOptionFooter, {
      label: "Merge exist records"
    })
  }, React.createElement(MergeRecordsIcon, null))), React.createElement(RenderIf, {
    isTrue: isMergeOption
  }, React.createElement(Select, {
    label: "Match Field",
    placeholder: "Select the Field do you want match",
    options: fieldOptions,
    onChange: function onChange(event) {
      return onChangeMatchField(event.target.value);
    },
    value: matchField
  })));
}
StepOne.propTypes = {
  schemaFields: PropTypes.array,
  actionOption: PropTypes.string,
  onChangeAction: PropTypes.func,
  matchField: PropTypes.string,
  onChangeMatchField: PropTypes.func
};
StepOne.defaultProps = {
  schemaFields: [],
  actionOption: '',
  onChangeAction: function onChangeAction() {},
  matchField: '',
  onChangeMatchField: function onChangeMatchField() {}
};