"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _typeof = require("@babel/runtime/helpers/typeof");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = StepOne;

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _VisualPickerOption = _interopRequireDefault(require("../../VisualPickerOption"));

var _VisualPickerOptionFooter = _interopRequireDefault(require("../../VisualPickerOptionFooter"));

var _RenderIf = _interopRequireDefault(require("../../RenderIf"));

var _Select = _interopRequireDefault(require("../../Select"));

var _addRecords = _interopRequireDefault(require("../icons/addRecords"));

var _mergeRecords = _interopRequireDefault(require("../icons/mergeRecords"));

var _getSchemaFieldOptions = _interopRequireDefault(require("../helpers/getSchemaFieldOptions"));

var _container = _interopRequireDefault(require("./styled/container"));

var _visualPicker = _interopRequireDefault(require("./styled/visualPicker"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function StepOne(props) {
  var schemaFields = props.schemaFields,
      actionOption = props.actionOption,
      onChangeAction = props.onChangeAction,
      matchField = props.matchField,
      onChangeMatchField = props.onChangeMatchField;

  var _useState = (0, _react.useState)([]),
      _useState2 = (0, _slicedToArray2["default"])(_useState, 2),
      fieldOptions = _useState2[0],
      setFieldOptions = _useState2[1];

  var isMergeOption = actionOption === 'merge-records';
  (0, _react.useEffect)(function () {
    setFieldOptions((0, _getSchemaFieldOptions["default"])(schemaFields));
  }, [schemaFields]);
  return _react["default"].createElement(_container["default"], null, _react["default"].createElement(_visualPicker["default"], {
    label: "Select the option type that do you want to do",
    onChange: onChangeAction,
    value: actionOption
  }, _react["default"].createElement(_VisualPickerOption["default"], {
    name: "add-records",
    footer: _react["default"].createElement(_VisualPickerOptionFooter["default"], {
      label: "Add new records"
    })
  }, _react["default"].createElement(_addRecords["default"], null)), _react["default"].createElement(_VisualPickerOption["default"], {
    name: "merge-records",
    footer: _react["default"].createElement(_VisualPickerOptionFooter["default"], {
      label: "Merge exist records"
    })
  }, _react["default"].createElement(_mergeRecords["default"], null))), _react["default"].createElement(_RenderIf["default"], {
    isTrue: isMergeOption
  }, _react["default"].createElement(_Select["default"], {
    label: "Match Field",
    placeholder: "Select the Field do you want match",
    options: fieldOptions,
    onChange: function onChange(event) {
      return onChangeMatchField(event.target.value);
    },
    value: matchField
  })));
}

StepOne.propTypes = {
  schemaFields: _propTypes["default"].array,
  actionOption: _propTypes["default"].string,
  onChangeAction: _propTypes["default"].func,
  matchField: _propTypes["default"].string,
  onChangeMatchField: _propTypes["default"].func
};
StepOne.defaultProps = {
  schemaFields: [],
  actionOption: '',
  onChangeAction: function onChangeAction() {},
  matchField: '',
  onChangeMatchField: function onChangeMatchField() {}
};